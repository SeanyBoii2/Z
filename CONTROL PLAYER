-- StarterPlayerScripts/ChatControl.lua (LocalScript)
local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local LocalPlayer = Players.LocalPlayer

-- change this to the display name (or username) you want to listen to
local ownerDisplayName = "Superman"

local function getSelf()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    return char, char:FindFirstChild("Humanoid"), char:FindFirstChild("HumanoidRootPart")
end

local function teleportToOwner(owner)
    local _, _, myHRP = getSelf()
    local oChar = owner.Character
    local oHRP = oChar and oChar:FindFirstChild("HumanoidRootPart")
    if myHRP and oHRP then
        myHRP.CFrame = oHRP.CFrame + Vector3.new(0, 3, 0)
    end
end

local function resetSelf()
    local _, humanoid = getSelf()
    if humanoid then
        humanoid.Health = 0
    end
end

local function anchorSelf(toggle)
    local _, _, myHRP = getSelf()
    if myHRP then
        myHRP.Anchored = toggle
    end
end

local function isOwner(plr)
    if not plr then return false end
    local pkt = function(s) return (s or ""):lower() end
    return pkt(plr.DisplayName) == pkt(ownerDisplayName) or pkt(plr.Name) == pkt(ownerDisplayName)
end

local function normalize(msg)
    if not msg then return "" end
    msg = msg:lower():gsub("^%s*(.-)%s*$", "%1")    -- trim
    msg = msg:gsub("^[/!]+", "")                  -- allow leading / or !
    msg = msg:gsub("^[%p%s]+", ""):gsub("[%p%s]+$", "")
    return msg
end

local function handleMessage(fromPlayer, rawMsg)
    if not fromPlayer or not rawMsg then return end
    if not isOwner(fromPlayer) then return end
    local msg = normalize(rawMsg)
    -- debug output: open Output window in Studio to see these
    print(("ChatControl: message from %s (%s): %s"):format(fromPlayer.Name, fromPlayer.DisplayName or "?", msg))
    if msg == "teleport" then
        teleportToOwner(fromPlayer)
    elseif msg == "reset" then
        resetSelf()
    elseif msg == "anchor" then
        anchorSelf(true)
    elseif msg == "unanchor" then
        anchorSelf(false)
    end
end

-- ---- TextChatService (modern) ----
if TextChatService then
    -- MessageReceived (TextChatMessage)
    if TextChatService.MessageReceived then
        TextChatService.MessageReceived:Connect(function(textChatMessage)
            local source = textChatMessage and textChatMessage.TextSource
            local userId = source and source.UserId
            local plr = userId and Players:GetPlayerByUserId(userId)
            if plr then
                handleMessage(plr, textChatMessage.Text)
            end
        end)
    end

    -- Some tutorials/older code use OnIncomingMessage; support it if present
    if TextChatService.OnIncomingMessage then
        local old = TextChatService.OnIncomingMessage
        TextChatService.OnIncomingMessage = function(message)
            local source = message and message.TextSource
            local userId = source and source.UserId
            local plr = userId and Players:GetPlayerByUserId(userId)
            if plr then
                handleMessage(plr, message.Text)
            end
            if old then
                return old(message)
            end
        end
    end
end

-- ---- Legacy fallback (may not always fire client-side) ----
for _, p in ipairs(Players:GetPlayers()) do
    p.Chatted:Connect(function(msg) handleMessage(p, msg) end)
end
Players.PlayerAdded:Connect(function(p)
    p.Chatted:Connect(function(msg) handleMessage(p, msg) end)
end)

print("ChatControl: ready (listening for '" .. ownerDisplayName .. "')")
