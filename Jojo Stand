local p = game:GetService("Players")
local r = game:GetService("RunService")
local uis = game:GetService("UserInputService")
local lp = p.LocalPlayer
local char = lp.Character or lp.CharacterAdded:Wait()
local t = false
local fConn = nil
local tE = false  -- Ensure toggle is off initially
local tK = Enum.KeyCode.C
local floatName = "FloatingPart"  -- Name of the floating part

-- Determine the correct animation ID and Y-offset based on the PlaceId
local placeId = game.PlaceId
local magnetAnimationId = placeId == 13447209899 and "rbxassetid://14611804638" or "rbxassetid://313762630"
local yOffset = placeId == 13447209899 and 2 or 0  -- Y-offset is 2 for PlaceId 13447209899, otherwise 0
local currentAnimTrack = nil  -- To keep track of the current animation

-- Function to create the floating part
local function createFloatingPart(char)
    if char and not char:FindFirstChild(floatName) then
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = char
        Float.Transparency = 1
        Float.Size = Vector3.new(3, 0.2, 3)
        Float.Anchored = true
        Float.CFrame = char.HumanoidRootPart.CFrame * CFrame.new(0, -3.1, 0)
    end
end

-- Function to remove the floating part
local function removeFloatingPart(char)
    local floatPart = char:FindFirstChild(floatName)
    if floatPart then
        floatPart:Destroy()
    end
end

-- Function to handle floating movement and staying behind a target player
local function f(trgHRP, char)
    if fConn then fConn:Disconnect() end
    fConn = r.RenderStepped:Connect(function()
        local hrp = char:FindFirstChild("HumanoidRootPart")
        local floatPart = char:FindFirstChild(floatName)
        if hrp and floatPart then
            floatPart.CFrame = hrp.CFrame * CFrame.new(0, -3.1, 0)
        end
        if trgHRP and hrp then
            -- Use the Y-offset based on the PlaceId
            hrp.CFrame = trgHRP.CFrame * CFrame.new(-2, yOffset, 3.3)
        end
    end)
end

local function tpF(trg, char)
    if t or not tE then return end  -- Only run if toggle is active
    t = true
    local trgChar = trg.Character
    if not trgChar then return end
    local trgHRP = trgChar:FindFirstChild("HumanoidRootPart")
    local trgHum = trgChar:FindFirstChild("Humanoid")
    if trgHRP and trgHum then
        char:MoveTo(trgHRP.Position + trgHRP.CFrame.LookVector * -5)
        f(trgHRP, char)

        trgHum.Died:Connect(function()
            wait()
            t = false
            cP(char)
        end)
    else
        t = false
    end
end

local function cP(char)
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    for _, plr in pairs(p:GetPlayers()) do
        if plr ~= lp then
            local trgChar = plr.Character
            if trgChar then
                local trgHRP = trgChar:FindFirstChild("HumanoidRootPart")
                local trgHum = trgChar:FindFirstChild("Humanoid")
                if trgHRP and trgHum and trgHum.Health > 0 then
                    local dist = (hrp.Position - trgHRP.Position).Magnitude
                    if dist <= 12 then
                        tpF(plr, char)
                        return
                    end
                end
            end
        end
    end
end

-- Function to toggle floating and animation
local function tT(char)
    tE = not tE
    if tE then
        createFloatingPart(char)
        f(nil, char)
        r.RenderStepped:Connect(function()
            if tE and not t then
                cP(char)
            end
        end)

        -- Start the magnet animation in a loop when the toggle is on
        if not currentAnimTrack then
            local humanoid = char:WaitForChild("Humanoid")
            local magnetAnimation = Instance.new("Animation")
            magnetAnimation.AnimationId = magnetAnimationId
            currentAnimTrack = humanoid:LoadAnimation(magnetAnimation)
            currentAnimTrack.Looped = true
            currentAnimTrack:Play()
        end
    else
        removeFloatingPart(char)
        if fConn then
            fConn:Disconnect()
            fConn = nil
        end
        t = false

        -- Stop the magnet animation when the toggle is off
        if currentAnimTrack then
            currentAnimTrack:Stop()
            currentAnimTrack = nil
        end
    end
end

-- Function to check if animation has stopped and restart if necessary
local function checkAnimation()
    if tE and currentAnimTrack and not currentAnimTrack.IsPlaying then
        -- If animation isn't playing and toggle is on, restart it
        currentAnimTrack:Play()
    end
end

-- Monitor the animation and restart it if interrupted
r.RenderStepped:Connect(checkAnimation)

uis.InputBegan:Connect(function(input)
    if input.KeyCode == tK then
        tT(lp.Character)
    end
end)

lp.CharacterAdded:Connect(function(newChar)
    char = newChar
    if tE then
        createFloatingPart(char)
    end
end)
